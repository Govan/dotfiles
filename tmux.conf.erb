
<% if `which reattach-to-user-namespace`.empty? %>
# Looking for reattach-to-user-namespace support?
# the erb template that generates this file will only include those
# bindings if reattache-to-user-namespace is present in the path
<% else %>
set-option -g default-command "reattach-to-user-namespace -l /bin/zsh"
bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
<% end %>

setw -g xterm-keys on

# Set the delay when expecting an escape sequence to nothing.
# If this isn't 0 then vim 'hangs' for a second when leaving insert mode
# and if you're too quick you'll end up inserting a weird character as, say,  <esc-d>
set -sg escape-time 0

# on farbaby this causes vim-solarized to behave badly
#set -g default-terminal "xterm-256color"
set -g default-terminal "screen-256color"

# Number windows and panes from 1, rather than 0
set -g base-index 1
setw -g pane-base-index 1

# More intuitive commands to split windows
# Although | would make more sense, it require shift too, so let's just use it's shiftless press
bind \ split-window -h
bind - split-window -v

# Move between items  with vim-like keys 
setw -g mode-keys vi

# Resize spilts
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# I hereby give myself permission to use the mouse                                                              
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# Vim-like copy mode with (v)isual and (y)ank
unbind [
bind Enter copy-mode
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection

# Move between windows with Ctrl-hl
# To use this on with iTerm set the alt-key to behave as +Esc in the profile
unbind s
unbind h
bind -n M-s next-window
bind -n M-h previous-window


# Smart pane switching with awareness of vim splits
# # Requires https://github.com/christoomey/vim-tmux-navigator
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"


# Give us a bigger scrollback
set -g history-limit 10000 
 
# r to reload our tmux.conf
bind r source-file ~/.tmux.conf \; display "Reloaded!"

#############################################
# COLORS AND STATUS BAR
# set the status line's colors
set -g status-fg white 
set -g status-bg colour21

# set the color of the window list
setw -g window-status-fg white 
setw -g window-status-bg default 

# set colors for the active window
setw -g window-status-current-fg white 
setw -g window-status-current-bg colour232

# pane colors
set -g pane-border-fg green
set -g pane-border-bg white
set -g pane-active-border-fg blue
set -g pane-active-border-fg blue 
set -g pane-active-border-bg blue

# Command / message line
set -g message-fg white 
set -g message-bg black 

# Status line left side
set -g status-left-length 40
set -g status-utf8 on

# Update the status bar every sixty seconds
set -g status-interval 60 # Center the window list
set -g status-justify centre
